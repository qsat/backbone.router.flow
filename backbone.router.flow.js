// Generated by CoffeeScript 1.6.3
(function() {
  (function(window, document, jQuery, Backbone) {
    var $, Deferred;
    $ = jQuery;
    Deferred = $.Deferred;
    return Backbone.Router = Backbone.Router.extend({
      defs: [],
      visited: [],
      pushDefer: function(defer) {
        this.defs.push(defer);
        return defer;
      },
      debug: true,
      log: function() {
        if (this.debug) {
          return console.log.apply(console, arguments);
        }
      },
      isFirstTime: function() {
        return this.prevDefer === void 0;
      },
      getPrevDefer: function() {
        var d;
        if (this.isFirstTime()) {
          d = typeof this.firstTime === "function" ? this.firstTime() : void 0;
        }
        return (this.prevDefer || new Deferred().resolve()).then(function() {
          return d;
        });
      },
      getCurrentUrl: function(l) {
        if (l == null) {
          l = location;
        }
        return l.pathname.replace(Backbone.history.root, "/") + l.search + l.hash;
      },
      _bindRoutes: function() {
        var routes,
          _this = this;
        if (!this.routes) {
          return;
        }
        this.routes = _.result(this, 'routes');
        routes = _.keys(this.routes);
        return _.each(routes, function(i) {
          var callback, name;
          name = _this.routes[i];
          if (!_.isString(name && !_.isFunction(name))) {
            callback = function(fragments) {
              return _this.activate.apply(_this, [name, fragments]);
            };
          }
          return _this.route(i, name, callback);
        });
      },
      navigate: function(fragment, interrupt, options) {
        if (options == null) {
          options = true;
        }
        if (interrupt === true) {
          this.interrupt();
        }
        Backbone.history.navigate(fragment, options);
        return this;
      },
      activate: function(c, args) {
        var defer, url,
          _this = this;
        if (args == null) {
          args = null;
        }
        this.log("\n=================", this.url = url = this.getCurrentUrl());
        this.prevDefer = this.getPrevDefer();
        defer = this.prevDefer.then(function() {
          var d, _ref;
          if (!_this.prevObj) {
            return;
          }
          if (_this.prevUrl) {
            _this.log("  LEAVING", _this.prevUrl);
          }
          d = _this.pushDefer((_ref = _this.prevObj) != null ? _ref.leave(_this) : void 0);
          return d != null ? d.done(function() {
            return _this.log("  LEAVED", _this.prevUrl);
          }) : void 0;
        }).then(function() {
          return _this.pushDefer(typeof _this.beforeEach === "function" ? _this.beforeEach(c, url, _this.prevUrl) : void 0);
        }).then(function() {
          var d;
          _this.log("  ENTERING", url);
          d = _this.pushDefer(c.enter.apply(c, Array.prototype.concat([_this], args)));
          return d != null ? typeof d.done === "function" ? d.done(function() {
            return _this.log("  ENTERED", url);
          }) : void 0 : void 0;
        }).then(function() {
          var d;
          d = _this.pushDefer(typeof _this.afterEach === "function" ? _this.afterEach(c, url) : void 0);
          _this.prevObj = null;
          _this.prevUrl = url;
          _this.visited.push(url);
          return d;
        });
        if (!defer) {
          defer = c.enter.apply(c, Array.prototype.concat([this], args));
        }
        return this.prevDefer = defer.then(function() {
          _this.prevObj = c;
          return _this.log("------- ACTIVATED " + url + "\n\n");
        });
      },
      interrupt: function() {
        this.defs = _.filter(this.defs, function(i) {
          return (i != null ? typeof i.state === "function" ? i.state() : void 0 : void 0) === 'pending';
        });
        if (this.defs.length === 0) {
          return;
        }
        this.log("------ Interrupted " + this.prevUrl, this.defs.map(function(i) {
          return i.name + '::' + i.state();
        }));
        _.each(this.defs, function(j) {
          return j.reject();
        });
        this.prevObj = null;
        return this.prevDefer = new Deferred().resolve();
      }
    });
  })(window, document, jQuery, Backbone);

}).call(this);
